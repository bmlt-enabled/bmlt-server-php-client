<?php
/**
 * RootServerApiTest
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BMLT
 *
 * BMLT Admin API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * RootServerApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RootServerApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for authLogout
     *
     * Revokes a token.
     *
     */
    public function testAuthLogout()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authRefresh
     *
     * Revokes and issues a new token.
     *
     */
    public function testAuthRefresh()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authToken
     *
     * Creates a token.
     *
     */
    public function testAuthToken()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createErrorTest
     *
     * Tests some errors.
     *
     */
    public function testCreateErrorTest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createFormat
     *
     * Creates a format.
     *
     */
    public function testCreateFormat()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createMeeting
     *
     * Creates a meeting.
     *
     */
    public function testCreateMeeting()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createServiceBody
     *
     * Creates a service body.
     *
     */
    public function testCreateServiceBody()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createUser
     *
     * Creates a user.
     *
     */
    public function testCreateUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteFormat
     *
     * Deletes a format.
     *
     */
    public function testDeleteFormat()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteMeeting
     *
     * Deletes a meeting.
     *
     */
    public function testDeleteMeeting()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteServiceBody
     *
     * Deletes a service body.
     *
     */
    public function testDeleteServiceBody()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUser
     *
     * Deletes a user.
     *
     */
    public function testDeleteUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getFormat
     *
     * Retrieves a format.
     *
     */
    public function testGetFormat()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getFormats
     *
     * Retrieves formats.
     *
     */
    public function testGetFormats()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getLaravelLog
     *
     * Retrieves laravel log.
     *
     */
    public function testGetLaravelLog()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getMeeting
     *
     * Retrieves a meeting.
     *
     */
    public function testGetMeeting()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getMeetingChanges
     *
     * Retrieve changes for a meeting.
     *
     */
    public function testGetMeetingChanges()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getMeetings
     *
     * Retrieves meetings.
     *
     */
    public function testGetMeetings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRootServer
     *
     * Retrieves a root server.
     *
     */
    public function testGetRootServer()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRootServers
     *
     * Retrieves root servers.
     *
     */
    public function testGetRootServers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getServiceBodies
     *
     * Retrieves service bodies.
     *
     */
    public function testGetServiceBodies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getServiceBody
     *
     * Retrieves a service body.
     *
     */
    public function testGetServiceBody()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getUser
     *
     * Retrieves a single user.
     *
     */
    public function testGetUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getUsers
     *
     * Retrieves users.
     *
     */
    public function testGetUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for partialUpdateUser
     *
     * Patches a user.
     *
     */
    public function testPartialUpdateUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for patchFormat
     *
     * Patches a format.
     *
     */
    public function testPatchFormat()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for patchMeeting
     *
     * Patches a meeting.
     *
     */
    public function testPatchMeeting()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for patchServiceBody
     *
     * Patches a service body.
     *
     */
    public function testPatchServiceBody()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateFormat
     *
     * Updates a format.
     *
     */
    public function testUpdateFormat()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateMeeting
     *
     * Updates a meeting.
     *
     */
    public function testUpdateMeeting()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateServiceBody
     *
     * Updates a Service Body.
     *
     */
    public function testUpdateServiceBody()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateUser
     *
     * Update single user.
     *
     */
    public function testUpdateUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
