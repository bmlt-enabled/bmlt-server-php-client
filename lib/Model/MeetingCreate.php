<?php
/**
 * MeetingCreate
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BMLT
 *
 * BMLT Admin API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MeetingCreate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MeetingCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MeetingCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'service_body_id' => 'int',
        'format_ids' => 'int[]',
        'venue_type' => 'int',
        'temporarily_virtual' => 'bool',
        'day' => 'int',
        'start_time' => 'string',
        'duration' => 'string',
        'time_zone' => 'string',
        'latitude' => 'float',
        'longitude' => 'float',
        'published' => 'bool',
        'email' => 'string',
        'world_id' => 'string',
        'name' => 'string',
        'location_text' => 'string',
        'location_info' => 'string',
        'location_street' => 'string',
        'location_neighborhood' => 'string',
        'location_city_subsection' => 'string',
        'location_municipality' => 'string',
        'location_sub_province' => 'string',
        'location_province' => 'string',
        'location_postal_code_1' => 'string',
        'location_nation' => 'string',
        'phone_meeting_number' => 'string',
        'virtual_meeting_link' => 'string',
        'virtual_meeting_additional_info' => 'string',
        'contact_name_1' => 'string',
        'contact_name_2' => 'string',
        'contact_phone_1' => 'string',
        'contact_phone_2' => 'string',
        'contact_email_1' => 'string',
        'contact_email_2' => 'string',
        'bus_lines' => 'string',
        'train_lines' => 'string',
        'comments' => 'string',
        'custom_fields' => 'array<string,string>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'service_body_id' => null,
        'format_ids' => null,
        'venue_type' => null,
        'temporarily_virtual' => null,
        'day' => null,
        'start_time' => null,
        'duration' => null,
        'time_zone' => null,
        'latitude' => 'float',
        'longitude' => 'float',
        'published' => null,
        'email' => null,
        'world_id' => null,
        'name' => null,
        'location_text' => null,
        'location_info' => null,
        'location_street' => null,
        'location_neighborhood' => null,
        'location_city_subsection' => null,
        'location_municipality' => null,
        'location_sub_province' => null,
        'location_province' => null,
        'location_postal_code_1' => null,
        'location_nation' => null,
        'phone_meeting_number' => null,
        'virtual_meeting_link' => null,
        'virtual_meeting_additional_info' => null,
        'contact_name_1' => null,
        'contact_name_2' => null,
        'contact_phone_1' => null,
        'contact_phone_2' => null,
        'contact_email_1' => null,
        'contact_email_2' => null,
        'bus_lines' => null,
        'train_lines' => null,
        'comments' => null,
        'custom_fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'service_body_id' => false,
        'format_ids' => false,
        'venue_type' => false,
        'temporarily_virtual' => false,
        'day' => false,
        'start_time' => false,
        'duration' => false,
        'time_zone' => false,
        'latitude' => false,
        'longitude' => false,
        'published' => false,
        'email' => false,
        'world_id' => false,
        'name' => false,
        'location_text' => false,
        'location_info' => false,
        'location_street' => false,
        'location_neighborhood' => false,
        'location_city_subsection' => false,
        'location_municipality' => false,
        'location_sub_province' => false,
        'location_province' => false,
        'location_postal_code_1' => false,
        'location_nation' => false,
        'phone_meeting_number' => false,
        'virtual_meeting_link' => false,
        'virtual_meeting_additional_info' => false,
        'contact_name_1' => false,
        'contact_name_2' => false,
        'contact_phone_1' => false,
        'contact_phone_2' => false,
        'contact_email_1' => false,
        'contact_email_2' => false,
        'bus_lines' => false,
        'train_lines' => false,
        'comments' => false,
        'custom_fields' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'service_body_id' => 'serviceBodyId',
        'format_ids' => 'formatIds',
        'venue_type' => 'venueType',
        'temporarily_virtual' => 'temporarilyVirtual',
        'day' => 'day',
        'start_time' => 'startTime',
        'duration' => 'duration',
        'time_zone' => 'timeZone',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'published' => 'published',
        'email' => 'email',
        'world_id' => 'worldId',
        'name' => 'name',
        'location_text' => 'location_text',
        'location_info' => 'location_info',
        'location_street' => 'location_street',
        'location_neighborhood' => 'location_neighborhood',
        'location_city_subsection' => 'location_city_subsection',
        'location_municipality' => 'location_municipality',
        'location_sub_province' => 'location_sub_province',
        'location_province' => 'location_province',
        'location_postal_code_1' => 'location_postal_code_1',
        'location_nation' => 'location_nation',
        'phone_meeting_number' => 'phone_meeting_number',
        'virtual_meeting_link' => 'virtual_meeting_link',
        'virtual_meeting_additional_info' => 'virtual_meeting_additional_info',
        'contact_name_1' => 'contact_name_1',
        'contact_name_2' => 'contact_name_2',
        'contact_phone_1' => 'contact_phone_1',
        'contact_phone_2' => 'contact_phone_2',
        'contact_email_1' => 'contact_email_1',
        'contact_email_2' => 'contact_email_2',
        'bus_lines' => 'bus_lines',
        'train_lines' => 'train_lines',
        'comments' => 'comments',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'service_body_id' => 'setServiceBodyId',
        'format_ids' => 'setFormatIds',
        'venue_type' => 'setVenueType',
        'temporarily_virtual' => 'setTemporarilyVirtual',
        'day' => 'setDay',
        'start_time' => 'setStartTime',
        'duration' => 'setDuration',
        'time_zone' => 'setTimeZone',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'published' => 'setPublished',
        'email' => 'setEmail',
        'world_id' => 'setWorldId',
        'name' => 'setName',
        'location_text' => 'setLocationText',
        'location_info' => 'setLocationInfo',
        'location_street' => 'setLocationStreet',
        'location_neighborhood' => 'setLocationNeighborhood',
        'location_city_subsection' => 'setLocationCitySubsection',
        'location_municipality' => 'setLocationMunicipality',
        'location_sub_province' => 'setLocationSubProvince',
        'location_province' => 'setLocationProvince',
        'location_postal_code_1' => 'setLocationPostalCode1',
        'location_nation' => 'setLocationNation',
        'phone_meeting_number' => 'setPhoneMeetingNumber',
        'virtual_meeting_link' => 'setVirtualMeetingLink',
        'virtual_meeting_additional_info' => 'setVirtualMeetingAdditionalInfo',
        'contact_name_1' => 'setContactName1',
        'contact_name_2' => 'setContactName2',
        'contact_phone_1' => 'setContactPhone1',
        'contact_phone_2' => 'setContactPhone2',
        'contact_email_1' => 'setContactEmail1',
        'contact_email_2' => 'setContactEmail2',
        'bus_lines' => 'setBusLines',
        'train_lines' => 'setTrainLines',
        'comments' => 'setComments',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'service_body_id' => 'getServiceBodyId',
        'format_ids' => 'getFormatIds',
        'venue_type' => 'getVenueType',
        'temporarily_virtual' => 'getTemporarilyVirtual',
        'day' => 'getDay',
        'start_time' => 'getStartTime',
        'duration' => 'getDuration',
        'time_zone' => 'getTimeZone',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'published' => 'getPublished',
        'email' => 'getEmail',
        'world_id' => 'getWorldId',
        'name' => 'getName',
        'location_text' => 'getLocationText',
        'location_info' => 'getLocationInfo',
        'location_street' => 'getLocationStreet',
        'location_neighborhood' => 'getLocationNeighborhood',
        'location_city_subsection' => 'getLocationCitySubsection',
        'location_municipality' => 'getLocationMunicipality',
        'location_sub_province' => 'getLocationSubProvince',
        'location_province' => 'getLocationProvince',
        'location_postal_code_1' => 'getLocationPostalCode1',
        'location_nation' => 'getLocationNation',
        'phone_meeting_number' => 'getPhoneMeetingNumber',
        'virtual_meeting_link' => 'getVirtualMeetingLink',
        'virtual_meeting_additional_info' => 'getVirtualMeetingAdditionalInfo',
        'contact_name_1' => 'getContactName1',
        'contact_name_2' => 'getContactName2',
        'contact_phone_1' => 'getContactPhone1',
        'contact_phone_2' => 'getContactPhone2',
        'contact_email_1' => 'getContactEmail1',
        'contact_email_2' => 'getContactEmail2',
        'bus_lines' => 'getBusLines',
        'train_lines' => 'getTrainLines',
        'comments' => 'getComments',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('service_body_id', $data ?? [], null);
        $this->setIfExists('format_ids', $data ?? [], null);
        $this->setIfExists('venue_type', $data ?? [], null);
        $this->setIfExists('temporarily_virtual', $data ?? [], null);
        $this->setIfExists('day', $data ?? [], null);
        $this->setIfExists('start_time', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('time_zone', $data ?? [], null);
        $this->setIfExists('latitude', $data ?? [], null);
        $this->setIfExists('longitude', $data ?? [], null);
        $this->setIfExists('published', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('world_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('location_text', $data ?? [], null);
        $this->setIfExists('location_info', $data ?? [], null);
        $this->setIfExists('location_street', $data ?? [], null);
        $this->setIfExists('location_neighborhood', $data ?? [], null);
        $this->setIfExists('location_city_subsection', $data ?? [], null);
        $this->setIfExists('location_municipality', $data ?? [], null);
        $this->setIfExists('location_sub_province', $data ?? [], null);
        $this->setIfExists('location_province', $data ?? [], null);
        $this->setIfExists('location_postal_code_1', $data ?? [], null);
        $this->setIfExists('location_nation', $data ?? [], null);
        $this->setIfExists('phone_meeting_number', $data ?? [], null);
        $this->setIfExists('virtual_meeting_link', $data ?? [], null);
        $this->setIfExists('virtual_meeting_additional_info', $data ?? [], null);
        $this->setIfExists('contact_name_1', $data ?? [], null);
        $this->setIfExists('contact_name_2', $data ?? [], null);
        $this->setIfExists('contact_phone_1', $data ?? [], null);
        $this->setIfExists('contact_phone_2', $data ?? [], null);
        $this->setIfExists('contact_email_1', $data ?? [], null);
        $this->setIfExists('contact_email_2', $data ?? [], null);
        $this->setIfExists('bus_lines', $data ?? [], null);
        $this->setIfExists('train_lines', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['service_body_id'] === null) {
            $invalidProperties[] = "'service_body_id' can't be null";
        }
        if ($this->container['format_ids'] === null) {
            $invalidProperties[] = "'format_ids' can't be null";
        }
        if ($this->container['venue_type'] === null) {
            $invalidProperties[] = "'venue_type' can't be null";
        }
        if ($this->container['day'] === null) {
            $invalidProperties[] = "'day' can't be null";
        }
        if ($this->container['start_time'] === null) {
            $invalidProperties[] = "'start_time' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalidProperties[] = "'duration' can't be null";
        }
        if ($this->container['latitude'] === null) {
            $invalidProperties[] = "'latitude' can't be null";
        }
        if ($this->container['longitude'] === null) {
            $invalidProperties[] = "'longitude' can't be null";
        }
        if ($this->container['published'] === null) {
            $invalidProperties[] = "'published' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets service_body_id
     *
     * @return int
     */
    public function getServiceBodyId()
    {
        return $this->container['service_body_id'];
    }

    /**
     * Sets service_body_id
     *
     * @param int $service_body_id service_body_id
     *
     * @return self
     */
    public function setServiceBodyId($service_body_id)
    {
        if (is_null($service_body_id)) {
            throw new \InvalidArgumentException('non-nullable service_body_id cannot be null');
        }
        $this->container['service_body_id'] = $service_body_id;

        return $this;
    }

    /**
     * Gets format_ids
     *
     * @return int[]
     */
    public function getFormatIds()
    {
        return $this->container['format_ids'];
    }

    /**
     * Sets format_ids
     *
     * @param int[] $format_ids format_ids
     *
     * @return self
     */
    public function setFormatIds($format_ids)
    {
        if (is_null($format_ids)) {
            throw new \InvalidArgumentException('non-nullable format_ids cannot be null');
        }
        $this->container['format_ids'] = $format_ids;

        return $this;
    }

    /**
     * Gets venue_type
     *
     * @return int
     */
    public function getVenueType()
    {
        return $this->container['venue_type'];
    }

    /**
     * Sets venue_type
     *
     * @param int $venue_type venue_type
     *
     * @return self
     */
    public function setVenueType($venue_type)
    {
        if (is_null($venue_type)) {
            throw new \InvalidArgumentException('non-nullable venue_type cannot be null');
        }
        $this->container['venue_type'] = $venue_type;

        return $this;
    }

    /**
     * Gets temporarily_virtual
     *
     * @return bool|null
     */
    public function getTemporarilyVirtual()
    {
        return $this->container['temporarily_virtual'];
    }

    /**
     * Sets temporarily_virtual
     *
     * @param bool|null $temporarily_virtual temporarily_virtual
     *
     * @return self
     */
    public function setTemporarilyVirtual($temporarily_virtual)
    {
        if (is_null($temporarily_virtual)) {
            throw new \InvalidArgumentException('non-nullable temporarily_virtual cannot be null');
        }
        $this->container['temporarily_virtual'] = $temporarily_virtual;

        return $this;
    }

    /**
     * Gets day
     *
     * @return int
     */
    public function getDay()
    {
        return $this->container['day'];
    }

    /**
     * Sets day
     *
     * @param int $day day
     *
     * @return self
     */
    public function setDay($day)
    {
        if (is_null($day)) {
            throw new \InvalidArgumentException('non-nullable day cannot be null');
        }
        $this->container['day'] = $day;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time start_time
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        if (is_null($start_time)) {
            throw new \InvalidArgumentException('non-nullable start_time cannot be null');
        }
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return string
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param string $duration duration
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            throw new \InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string|null
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string|null $time_zone time_zone
     *
     * @return self
     */
    public function setTimeZone($time_zone)
    {
        if (is_null($time_zone)) {
            throw new \InvalidArgumentException('non-nullable time_zone cannot be null');
        }
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float $latitude latitude
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        if (is_null($latitude)) {
            throw new \InvalidArgumentException('non-nullable latitude cannot be null');
        }
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float $longitude longitude
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        if (is_null($longitude)) {
            throw new \InvalidArgumentException('non-nullable longitude cannot be null');
        }
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets published
     *
     * @return bool
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     *
     * @param bool $published published
     *
     * @return self
     */
    public function setPublished($published)
    {
        if (is_null($published)) {
            throw new \InvalidArgumentException('non-nullable published cannot be null');
        }
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets world_id
     *
     * @return string|null
     */
    public function getWorldId()
    {
        return $this->container['world_id'];
    }

    /**
     * Sets world_id
     *
     * @param string|null $world_id world_id
     *
     * @return self
     */
    public function setWorldId($world_id)
    {
        if (is_null($world_id)) {
            throw new \InvalidArgumentException('non-nullable world_id cannot be null');
        }
        $this->container['world_id'] = $world_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets location_text
     *
     * @return string|null
     */
    public function getLocationText()
    {
        return $this->container['location_text'];
    }

    /**
     * Sets location_text
     *
     * @param string|null $location_text location_text
     *
     * @return self
     */
    public function setLocationText($location_text)
    {
        if (is_null($location_text)) {
            throw new \InvalidArgumentException('non-nullable location_text cannot be null');
        }
        $this->container['location_text'] = $location_text;

        return $this;
    }

    /**
     * Gets location_info
     *
     * @return string|null
     */
    public function getLocationInfo()
    {
        return $this->container['location_info'];
    }

    /**
     * Sets location_info
     *
     * @param string|null $location_info location_info
     *
     * @return self
     */
    public function setLocationInfo($location_info)
    {
        if (is_null($location_info)) {
            throw new \InvalidArgumentException('non-nullable location_info cannot be null');
        }
        $this->container['location_info'] = $location_info;

        return $this;
    }

    /**
     * Gets location_street
     *
     * @return string|null
     */
    public function getLocationStreet()
    {
        return $this->container['location_street'];
    }

    /**
     * Sets location_street
     *
     * @param string|null $location_street location_street
     *
     * @return self
     */
    public function setLocationStreet($location_street)
    {
        if (is_null($location_street)) {
            throw new \InvalidArgumentException('non-nullable location_street cannot be null');
        }
        $this->container['location_street'] = $location_street;

        return $this;
    }

    /**
     * Gets location_neighborhood
     *
     * @return string|null
     */
    public function getLocationNeighborhood()
    {
        return $this->container['location_neighborhood'];
    }

    /**
     * Sets location_neighborhood
     *
     * @param string|null $location_neighborhood location_neighborhood
     *
     * @return self
     */
    public function setLocationNeighborhood($location_neighborhood)
    {
        if (is_null($location_neighborhood)) {
            throw new \InvalidArgumentException('non-nullable location_neighborhood cannot be null');
        }
        $this->container['location_neighborhood'] = $location_neighborhood;

        return $this;
    }

    /**
     * Gets location_city_subsection
     *
     * @return string|null
     */
    public function getLocationCitySubsection()
    {
        return $this->container['location_city_subsection'];
    }

    /**
     * Sets location_city_subsection
     *
     * @param string|null $location_city_subsection location_city_subsection
     *
     * @return self
     */
    public function setLocationCitySubsection($location_city_subsection)
    {
        if (is_null($location_city_subsection)) {
            throw new \InvalidArgumentException('non-nullable location_city_subsection cannot be null');
        }
        $this->container['location_city_subsection'] = $location_city_subsection;

        return $this;
    }

    /**
     * Gets location_municipality
     *
     * @return string|null
     */
    public function getLocationMunicipality()
    {
        return $this->container['location_municipality'];
    }

    /**
     * Sets location_municipality
     *
     * @param string|null $location_municipality location_municipality
     *
     * @return self
     */
    public function setLocationMunicipality($location_municipality)
    {
        if (is_null($location_municipality)) {
            throw new \InvalidArgumentException('non-nullable location_municipality cannot be null');
        }
        $this->container['location_municipality'] = $location_municipality;

        return $this;
    }

    /**
     * Gets location_sub_province
     *
     * @return string|null
     */
    public function getLocationSubProvince()
    {
        return $this->container['location_sub_province'];
    }

    /**
     * Sets location_sub_province
     *
     * @param string|null $location_sub_province location_sub_province
     *
     * @return self
     */
    public function setLocationSubProvince($location_sub_province)
    {
        if (is_null($location_sub_province)) {
            throw new \InvalidArgumentException('non-nullable location_sub_province cannot be null');
        }
        $this->container['location_sub_province'] = $location_sub_province;

        return $this;
    }

    /**
     * Gets location_province
     *
     * @return string|null
     */
    public function getLocationProvince()
    {
        return $this->container['location_province'];
    }

    /**
     * Sets location_province
     *
     * @param string|null $location_province location_province
     *
     * @return self
     */
    public function setLocationProvince($location_province)
    {
        if (is_null($location_province)) {
            throw new \InvalidArgumentException('non-nullable location_province cannot be null');
        }
        $this->container['location_province'] = $location_province;

        return $this;
    }

    /**
     * Gets location_postal_code_1
     *
     * @return string|null
     */
    public function getLocationPostalCode1()
    {
        return $this->container['location_postal_code_1'];
    }

    /**
     * Sets location_postal_code_1
     *
     * @param string|null $location_postal_code_1 location_postal_code_1
     *
     * @return self
     */
    public function setLocationPostalCode1($location_postal_code_1)
    {
        if (is_null($location_postal_code_1)) {
            throw new \InvalidArgumentException('non-nullable location_postal_code_1 cannot be null');
        }
        $this->container['location_postal_code_1'] = $location_postal_code_1;

        return $this;
    }

    /**
     * Gets location_nation
     *
     * @return string|null
     */
    public function getLocationNation()
    {
        return $this->container['location_nation'];
    }

    /**
     * Sets location_nation
     *
     * @param string|null $location_nation location_nation
     *
     * @return self
     */
    public function setLocationNation($location_nation)
    {
        if (is_null($location_nation)) {
            throw new \InvalidArgumentException('non-nullable location_nation cannot be null');
        }
        $this->container['location_nation'] = $location_nation;

        return $this;
    }

    /**
     * Gets phone_meeting_number
     *
     * @return string|null
     */
    public function getPhoneMeetingNumber()
    {
        return $this->container['phone_meeting_number'];
    }

    /**
     * Sets phone_meeting_number
     *
     * @param string|null $phone_meeting_number phone_meeting_number
     *
     * @return self
     */
    public function setPhoneMeetingNumber($phone_meeting_number)
    {
        if (is_null($phone_meeting_number)) {
            throw new \InvalidArgumentException('non-nullable phone_meeting_number cannot be null');
        }
        $this->container['phone_meeting_number'] = $phone_meeting_number;

        return $this;
    }

    /**
     * Gets virtual_meeting_link
     *
     * @return string|null
     */
    public function getVirtualMeetingLink()
    {
        return $this->container['virtual_meeting_link'];
    }

    /**
     * Sets virtual_meeting_link
     *
     * @param string|null $virtual_meeting_link virtual_meeting_link
     *
     * @return self
     */
    public function setVirtualMeetingLink($virtual_meeting_link)
    {
        if (is_null($virtual_meeting_link)) {
            throw new \InvalidArgumentException('non-nullable virtual_meeting_link cannot be null');
        }
        $this->container['virtual_meeting_link'] = $virtual_meeting_link;

        return $this;
    }

    /**
     * Gets virtual_meeting_additional_info
     *
     * @return string|null
     */
    public function getVirtualMeetingAdditionalInfo()
    {
        return $this->container['virtual_meeting_additional_info'];
    }

    /**
     * Sets virtual_meeting_additional_info
     *
     * @param string|null $virtual_meeting_additional_info virtual_meeting_additional_info
     *
     * @return self
     */
    public function setVirtualMeetingAdditionalInfo($virtual_meeting_additional_info)
    {
        if (is_null($virtual_meeting_additional_info)) {
            throw new \InvalidArgumentException('non-nullable virtual_meeting_additional_info cannot be null');
        }
        $this->container['virtual_meeting_additional_info'] = $virtual_meeting_additional_info;

        return $this;
    }

    /**
     * Gets contact_name_1
     *
     * @return string|null
     */
    public function getContactName1()
    {
        return $this->container['contact_name_1'];
    }

    /**
     * Sets contact_name_1
     *
     * @param string|null $contact_name_1 contact_name_1
     *
     * @return self
     */
    public function setContactName1($contact_name_1)
    {
        if (is_null($contact_name_1)) {
            throw new \InvalidArgumentException('non-nullable contact_name_1 cannot be null');
        }
        $this->container['contact_name_1'] = $contact_name_1;

        return $this;
    }

    /**
     * Gets contact_name_2
     *
     * @return string|null
     */
    public function getContactName2()
    {
        return $this->container['contact_name_2'];
    }

    /**
     * Sets contact_name_2
     *
     * @param string|null $contact_name_2 contact_name_2
     *
     * @return self
     */
    public function setContactName2($contact_name_2)
    {
        if (is_null($contact_name_2)) {
            throw new \InvalidArgumentException('non-nullable contact_name_2 cannot be null');
        }
        $this->container['contact_name_2'] = $contact_name_2;

        return $this;
    }

    /**
     * Gets contact_phone_1
     *
     * @return string|null
     */
    public function getContactPhone1()
    {
        return $this->container['contact_phone_1'];
    }

    /**
     * Sets contact_phone_1
     *
     * @param string|null $contact_phone_1 contact_phone_1
     *
     * @return self
     */
    public function setContactPhone1($contact_phone_1)
    {
        if (is_null($contact_phone_1)) {
            throw new \InvalidArgumentException('non-nullable contact_phone_1 cannot be null');
        }
        $this->container['contact_phone_1'] = $contact_phone_1;

        return $this;
    }

    /**
     * Gets contact_phone_2
     *
     * @return string|null
     */
    public function getContactPhone2()
    {
        return $this->container['contact_phone_2'];
    }

    /**
     * Sets contact_phone_2
     *
     * @param string|null $contact_phone_2 contact_phone_2
     *
     * @return self
     */
    public function setContactPhone2($contact_phone_2)
    {
        if (is_null($contact_phone_2)) {
            throw new \InvalidArgumentException('non-nullable contact_phone_2 cannot be null');
        }
        $this->container['contact_phone_2'] = $contact_phone_2;

        return $this;
    }

    /**
     * Gets contact_email_1
     *
     * @return string|null
     */
    public function getContactEmail1()
    {
        return $this->container['contact_email_1'];
    }

    /**
     * Sets contact_email_1
     *
     * @param string|null $contact_email_1 contact_email_1
     *
     * @return self
     */
    public function setContactEmail1($contact_email_1)
    {
        if (is_null($contact_email_1)) {
            throw new \InvalidArgumentException('non-nullable contact_email_1 cannot be null');
        }
        $this->container['contact_email_1'] = $contact_email_1;

        return $this;
    }

    /**
     * Gets contact_email_2
     *
     * @return string|null
     */
    public function getContactEmail2()
    {
        return $this->container['contact_email_2'];
    }

    /**
     * Sets contact_email_2
     *
     * @param string|null $contact_email_2 contact_email_2
     *
     * @return self
     */
    public function setContactEmail2($contact_email_2)
    {
        if (is_null($contact_email_2)) {
            throw new \InvalidArgumentException('non-nullable contact_email_2 cannot be null');
        }
        $this->container['contact_email_2'] = $contact_email_2;

        return $this;
    }

    /**
     * Gets bus_lines
     *
     * @return string|null
     */
    public function getBusLines()
    {
        return $this->container['bus_lines'];
    }

    /**
     * Sets bus_lines
     *
     * @param string|null $bus_lines bus_lines
     *
     * @return self
     */
    public function setBusLines($bus_lines)
    {
        if (is_null($bus_lines)) {
            throw new \InvalidArgumentException('non-nullable bus_lines cannot be null');
        }
        $this->container['bus_lines'] = $bus_lines;

        return $this;
    }

    /**
     * Gets train_lines
     *
     * @return string|null
     */
    public function getTrainLines()
    {
        return $this->container['train_lines'];
    }

    /**
     * Sets train_lines
     *
     * @param string|null $train_lines train_lines
     *
     * @return self
     */
    public function setTrainLines($train_lines)
    {
        if (is_null($train_lines)) {
            throw new \InvalidArgumentException('non-nullable train_lines cannot be null');
        }
        $this->container['train_lines'] = $train_lines;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments comments
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return array<string,string>|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param array<string,string>|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


